---
import type { CollectionEntry } from 'astro:content';

interface Props {
    note: CollectionEntry<'notes'>;
}

const { note } = Astro.props;
const { title, date, tags = [], summary } = note.data;

function formatDate(dateString: string | undefined) {
    if (!dateString) return '';

    try {
        return new Date(dateString).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric',
        });
    } catch (error) {
        console.error('Error formatting date:', error);
        return '';
    }
}

const formattedDate = formatDate(date);
---

<a
    href={`/notes/${note.slug}`}
    class="block bg-white dark:bg-[#2E466B] rounded-xl shadow-md hover:shadow-lg transition-all duration-300 overflow-hidden hover:-translate-y-1"
>
    <div class="p-6">
        <div class="flex items-center justify-between mb-4">
            {
                formattedDate && (
                    <span class="text-sm text-[#213555]/60 dark:text-[#f5efe7]/60">
                        {formattedDate}
                    </span>
                )
            }
        </div>

        <h2 class="text-xl font-bold mb-3 text-[#213555] dark:text-[#f5efe7]">
            {title || 'Untitled Note'}
        </h2>

        {
            summary && (
                <p class="text-[#213555]/80 dark:text-[#f5efe7]/80 mb-5 line-clamp-3">{summary}</p>
            )
        }

        {
            tags.length > 0 && (
                <div class="flex flex-wrap gap-2 mt-auto">
                    {tags.map((tag) => (
                        <span class="inline-block px-3 py-1 text-xs rounded-full bg-[#D8C4B6]/30 dark:bg-[#3E5879] text-[#213555] dark:text-[#f5efe7]">
                            {tag}
                        </span>
                    ))}
                </div>
            )
        }
    </div>
</a>
