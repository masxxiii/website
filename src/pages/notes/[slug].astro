---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';

// Generate all note paths
export async function getStaticPaths() {
    const notes = await getCollection('notes');
    return notes.map((note) => ({
        params: { slug: note.slug },
        props: { note },
    }));
}

type Note = CollectionEntry<'notes'>;

interface Props {
    note: Note;
}

const { note } = Astro.props as Props;
const { Content } = await note.render();

// Get related notes (up to 3 that share tags with current note)
const allNotes = await getCollection('notes');
const relatedNotes = allNotes
    .filter((n) => n.slug !== note.slug)
    .filter((n) => n.data.tags.some((tag) => note.data.tags.includes(tag)))
    .sort((a, b) => {
        // Sort by number of matching tags (descending)
        const aCommonTags = a.data.tags.filter((tag) => note.data.tags.includes(tag)).length;
        const bCommonTags = b.data.tags.filter((tag) => note.data.tags.includes(tag)).length;
        return bCommonTags - aCommonTags;
    })
    .slice(0, 3);

function formatDate(dateString: string) {
    return new Date(dateString).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
    });
}
---

<Layout>
    <div class="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <div class="mb-8">
            <a
                href="/notes"
                class="inline-flex items-center text-sm font-medium transition-colors text-[#213555] dark:text-[#f5efe7] hover:text-[#D8C4B6] dark:hover:text-[#D8C4B6]"
            >
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-4 w-4 mr-1"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                >
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                </svg>
                Back to all notes
            </a>
        </div>

        <article class="bg-white dark:bg-[#2E466B] rounded-xl shadow-md overflow-hidden">
            <div class="p-6 md:p-8">
                <div class="mb-6">
                    <time class="text-sm text-[#213555]/60 dark:text-[#f5efe7]/60">
                        {formatDate(note.data.date)}
                    </time>
                    <h1 class="text-3xl font-bold mt-2 mb-4 text-[#213555] dark:text-[#f5efe7]">
                        {note.data.title}
                    </h1>

                    <div class="flex flex-wrap gap-2 mb-8">
                        {
                            note.data.tags.map((tag) => (
                                <a
                                    href={`/notes?tag=${encodeURIComponent(tag)}`}
                                    class="inline-block px-3 py-1 text-sm rounded-full bg-[#D8C4B6]/30 dark:bg-[#3E5879] text-[#213555] dark:text-[#f5efe7] hover:bg-[#D8C4B6]/50 dark:hover:bg-[#3E5879]/70 transition-colors"
                                >
                                    {tag}
                                </a>
                            ))
                        }
                    </div>
                </div>

                <div
                    class="prose prose-lg dark:prose-invert prose-headings:text-[#213555] dark:prose-headings:text-[#f5efe7] prose-a:text-[#4F709C] dark:prose-a:text-[#D8C4B6] max-w-none"
                >
                    <Content />
                </div>
            </div>
        </article>

        {
            relatedNotes.length > 0 && (
                <div class="mt-12">
                    <h2 class="text-2xl font-bold mb-6 text-[#213555] dark:text-[#f5efe7]">
                        Related Notes
                    </h2>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        {relatedNotes.map((relatedNote) => (
                            <a
                                href={`/notes/${relatedNote.slug}`}
                                class="block bg-white dark:bg-[#2E466B] rounded-xl shadow-md hover:shadow-lg transition-all duration-300 overflow-hidden hover:-translate-y-1 p-5"
                            >
                                <h3 class="text-lg font-bold mb-2 text-[#213555] dark:text-[#f5efe7]">
                                    {relatedNote.data.title}
                                </h3>
                                <p class="text-sm text-[#213555]/80 dark:text-[#f5efe7]/80 line-clamp-2 mb-3">
                                    {relatedNote.data.summary}
                                </p>
                                <div class="flex flex-wrap gap-1">
                                    {relatedNote.data.tags
                                        .filter((tag) => note.data.tags.includes(tag))
                                        .slice(0, 3)
                                        .map((tag) => (
                                            <span class="inline-block px-2 py-0.5 text-xs rounded-full bg-[#D8C4B6]/20 dark:bg-[#3E5879]/70 text-[#213555] dark:text-[#f5efe7]">
                                                {tag}
                                            </span>
                                        ))}
                                </div>
                            </a>
                        ))}
                    </div>
                </div>
            )
        }
    </div>
</Layout>

<style is:global>
    /* Add any custom markdown styling here */
    .prose pre {
        background-color: #1e293b;
        color: #f8fafc;
        padding: 1.25rem;
        border-radius: 0.5rem;
        overflow-x: auto;
    }

    .prose code {
        color: #ef4444;
        background-color: rgba(239, 68, 68, 0.1);
        padding: 0.2em 0.4em;
        border-radius: 0.25rem;
    }

    .prose pre code {
        color: inherit;
        background-color: transparent;
        padding: 0;
    }

    .prose blockquote {
        border-left-color: #d8c4b6;
        font-style: italic;
    }

    .dark .prose blockquote {
        border-left-color: #3e5879;
    }

    .prose img {
        border-radius: 0.5rem;
    }

    .prose table {
        width: 100%;
        border-collapse: collapse;
        margin: 2rem 0;
    }

    .prose table th {
        background-color: rgba(216, 196, 182, 0.2);
        font-weight: 600;
        text-align: left;
        padding: 0.75rem;
        border-bottom: 2px solid rgba(216, 196, 182, 0.3);
    }

    .dark .prose table th {
        background-color: rgba(62, 88, 121, 0.3);
        border-bottom: 2px solid rgba(62, 88, 121, 0.5);
    }

    .prose table td {
        padding: 0.75rem;
        border-bottom: 1px solid rgba(216, 196, 182, 0.2);
    }

    .dark .prose table td {
        border-bottom: 1px solid rgba(62, 88, 121, 0.3);
    }
</style>
